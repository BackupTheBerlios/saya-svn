HOW to implement the monitor preview:

The common class VideoOutputDevice contains everything (I hope) we need to implement video playback (per frame -
we'll deal with the timing details later).

1) What we need to do, is create some classes which derivate from VideoOutputDevice.

1.1) We can start with a NullVideoOutputDevice class, that simply does ABSOLUTELY NOTHING.

1.2) Based on this class, we can start tying it up to the wxWidgets Monitor / Preview panel.

1.3) When everything's done, we can make a "debug test" to display an image on the display. Of course, it will show nothing.

1.4) Now let's make a standard bitmap drawer with wxWidgets. The wxWidgets part will be hidden from the interface
   (that's how it should be) and make it the default.

1.5) The hardest part will be integrating SDL onto this thing.

1.6) When we can display images through SDL, we're ready for the next step: Integrating video playback (to be continued).

UPDATE (22/Jul/2008) :

I finally found out how to make the VideoOutputDevice classes simple to implement. Use wxWidgets-specific implementations of them,
and use the VideoOutputDevice interface to communicate with the rest of the program. This doesn't break the framework design, and
at the same time allows us to use existing wxWidgets implementations of SDL.

Update (17/Nov/2008) :

So far, steps 1.1 to 1.6 are done except the creation of the NullVideoOutputDevice class, and we didn't
use SDL anyway. Now we need to focus on the Input processing.

2.1) [done] Create a NulVideoInputDevice that only displays a blank screen. Why not call it NullVID.

2.2) [done] Create a FileVID that loads info from a file.
2.2.1) [pending] There must be some way to integrate it with GStreamer so we're able to use input plugins.
2.2.2) [deferred for later] And while we're at it, perhaps we should have a CaptureVID class.

2.3) [deferred for later] Create a RenderedVID class, which will implement the full-fledged video rendering.

2.4) Create an InputMonitor class (outside the core), which will encapsulate AVController. It will have its own
NullVID, CaptureVID, and FileVID objects (to keep the one-consumer,one-producer  design).

2.5) Create a SequenceMonitor class (outside the core), which will encapsulate AVController.
It will have a RenderedVid object, probably tied to the current project.

2.6) Tie the InputMonitor and SequenceMonitor to our two wxVideoPanels, and attach the playback
control widgets to them.

2.7) Test!
